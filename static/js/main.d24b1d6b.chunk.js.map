{"version":3,"sources":["App.js","serviceWorker.js","index.js","kousik.jpg"],"names":["App","className","src","myFace","alt","Date","toLocaleString","href","target","rel","icon","size","Boolean","window","location","hostname","match","library","add","fab","faDatabase","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","module","exports"],"mappings":"uQA4DeA,MAvDf,WACE,OACE,yBAAKC,UAAU,OACb,4BAAQA,UAAU,cAChB,yBAAKC,IAAKC,IAAQF,UAAU,WAAWG,IAAI,SAC3C,0EAC8C,+BAAQ,IAAIC,MAAOC,mBAEjE,yBAAKL,UAAU,uBACb,uBACEA,UAAU,WACVM,KAAK,iCACLC,OAAO,SACPC,IAAI,uBAEJ,kBAAC,IAAD,CAAiBR,UAAU,YAAYS,KAAM,CAAC,MAAO,aAEvD,uBACET,UAAU,WACVM,KAAK,gDACLC,OAAO,SACPC,IAAI,uBAEJ,kBAAC,IAAD,CAAiBR,UAAU,YAAYS,KAAM,CAAC,MAAO,eAEvD,uBACET,UAAU,WACVM,KAAK,uDACLC,OAAO,SACPC,IAAI,uBAEJ,kBAAC,IAAD,CAAiBR,UAAU,YAAYS,KAAM,CAAC,MAAO,qBAEvD,uBACET,UAAU,WACVM,KAAK,wCACLC,OAAO,SACPC,IAAI,uBAEJ,kBAAC,IAAD,CAAiBR,UAAU,YAAYS,KAAM,CAAC,MAAO,gBAEvD,uBACET,UAAU,WACVM,KAAK,kIACLC,OAAO,SACPC,IAAI,uBAEJ,kBAAC,IAAD,CAAiBR,UAAU,YAAYS,KAAK,WAAWC,KAAK,WCxCpDC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,yBCTNC,IAAQC,IAAIC,IAAKC,KAEjBC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDsH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB,kBEnInBC,EAAOC,QAAU,IAA0B,qC","file":"static/js/main.d24b1d6b.chunk.js","sourcesContent":["import React from 'react';\r\nimport './App.css';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport myFace from './kousik.jpg'\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <header className=\"App-header\">\r\n        <img src={myFace} className=\"App-logo\" alt=\"logo\" />\r\n        <p>\r\n          Hi! fixing something.. Checkout here &darr; <code>{ new Date().toLocaleString() }</code>\r\n        </p>\r\n        <div className=\"follow-me-conatiner\">\r\n          <a\r\n            className=\"App-link\"\r\n            href=\"https://github.com/kousikmitra\"\r\n            target=\"_blank\"\r\n            rel=\"noopener noreferrer\"\r\n          >\r\n            <FontAwesomeIcon className=\"follow-me\" icon={['fab', 'github']} />\r\n          </a>\r\n          <a\r\n            className=\"App-link\"\r\n            href=\"https://www.linkedin.com/in/kousik-m-83235aa0\"\r\n            target=\"_blank\"\r\n            rel=\"noopener noreferrer\"\r\n          >\r\n            <FontAwesomeIcon className=\"follow-me\" icon={['fab', 'linkedin']} />\r\n          </a>\r\n          <a\r\n            className=\"App-link\"\r\n            href=\"https://stackoverflow.com/users/7718559/kousik-mitra\"\r\n            target=\"_blank\"\r\n            rel=\"noopener noreferrer\"\r\n          >\r\n            <FontAwesomeIcon className=\"follow-me\" icon={['fab', 'stack-overflow']} />\r\n          </a>\r\n          <a\r\n            className=\"App-link\"\r\n            href=\"https://www.instagram.com/_k.mitter_/\"\r\n            target=\"_blank\"\r\n            rel=\"noopener noreferrer\"\r\n          >\r\n            <FontAwesomeIcon className=\"follow-me\" icon={['fab', 'instagram']} />\r\n          </a>\r\n          <a\r\n            className=\"App-link\"\r\n            href=\"https://docs.google.com/document/d/e/2PACX-1vTsr0vpPrxHTgxwXGyOdNgSnufh2Pgdum9iEs_XzRACad1meQiLLXG9ZM8qk3W6RxffTjtFqRhkRLHw/pub\"\r\n            target=\"_blank\"\r\n            rel=\"noopener noreferrer\"\r\n          >\r\n            <FontAwesomeIcon className=\"follow-me\" icon=\"database\" size=\"1\" />\r\n          </a>\r\n          </div>\r\n      </header>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport { library } from '@fortawesome/fontawesome-svg-core'\r\nimport { fab } from '@fortawesome/free-brands-svg-icons'\r\nimport { faDatabase } from '@fortawesome/free-solid-svg-icons'\r\n \r\nlibrary.add(fab, faDatabase)\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n","module.exports = __webpack_public_path__ + \"static/media/kousik.5a8ba6f7.jpg\";"],"sourceRoot":""}